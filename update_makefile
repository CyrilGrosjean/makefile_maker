#!/usr/bin/env python3

import sys
from datetime import *
from os import getcwd, chdir, listdir, remove, path, chmod
from os import stat as stats
import requests
import stat

options = [False, False, False, False, False, False, False, False, False, False] # -d, -t, -csfml, -ncures, -lib, -include, -gcovr, -shell, -C, -clean
arguments = sys.argv
version_link = "https://raw.githubusercontent.com/CyrilGrosjean/makefile_maker/master/updates/version"
file_link = "https://raw.githubusercontent.com/CyrilGrosjean/makefile_maker/master/update_makefile"
actual_version = "1.6.0"
file_directory = path.abspath(__file__)

def search_update():
    global actual_version
    global version_link
    global file_directory
    global file_link

    version = []
    check_version = []

    print(warn() + "Checking for updates..." + end())
    version = actual_version.split(".")
    file_found = False
    try:
        r = requests.get(version_link)
        file_found = True
    except:
        file_found = False

    if file_found:
        with open('n_ver.txt', 'wb') as f:
            f.write(r.content)
        del r

        file = open("n_ver.txt", 'r')
        file_content = file.read()
        file.close()
        remove("n_ver.txt")
        check_version = file_content.split(".")

        require_update = False
        for i in range(0, len(version)):
            if version[i] != check_version[i]:
                require_update = True

        if require_update:
            print(warn() + "Your version is outdated ! (your version: " + ".".join(version) + "; actual: " + ".".join(check_version) + ")\nStarting update..." + end())
            del file_content
            file_found = False
            try:
                r = requests.get(file_link)
                file_found = True
            except:
                file_found = False

            if file_found:
                with open(file_directory, 'wb') as f:
                    f.write(r.content)
                del r
                st = stats(file_directory)
                chmod(file_directory, st.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
                print(green() + "Program updated !\nPlease restart the program with './update_makefile'" + end())
                exit(0)
            else:
                print(fail() + "No Internet connection.\n" + endl())
        else:
            print(green() + "The program already up to date !\n" + end())
            del file_content
            del check_version
            del version
    else:
        print(fail() + "No Internet connection.\n" + end())


def bold():
    return "\033[1m"

def green():
    return "\033[92m"

def fail():
    return "\033[91m"

def warn():
    return "\033[93m"

def end():
    return "\033[0m"

def create_makefile(file_src, file_test, file_lib, name):
    global options

    date = datetime.now()
    year = date.year
    copy_src = file_src.copy()

    if date.month < 9:
        year -= 1

    print(warn() + "Creating Makefile with your options..." + end())
    makefile_text = ["##", "## EPITECH PROJECT, " + str(year), "## Makefile by update_makefile", "## File description:", "## Makefile auto generated, by Cyril Grosjean version: " + actual_version, "##", ""]
    if options[7]:
        tmp = []
        for i in file_src:
            if i.count("/") == 1:
                print(fail() + "FAILURE: -shell flag can't be used for src files in root repository.\nPlease create a src repository and store your src files in before restarting the makefile maker.")
                exit(0)
            if i.split("/")[1] not in tmp:
                tmp.append(i.split("/")[1])
        makefile_text.append("SRC_MAIN=\t$(shell find " + tmp[0] + " -name \"*.c\") \\")
        del tmp[0]
        for i in tmp:
            makefile_text.append("$(shell find " + i + " -name \"*.c\") \\")
        del tmp
    else:
        makefile_text.append("SRC_MAIN =\t" + str(file_src[0]) + "\t\\")
        del file_src[0]

        for i in file_src:
            makefile_text.append("\t\t\t" + str(i) + "\t\\")
    makefile_text.append("")
    if options[1]:
        if options[7]:
            for i in file_src:
                if "main.c" in i:
                    tmp = i.split("/")
                    del tmp[0]
                    tmp2 = "/".join(tmp)
                    del tmp
                    break
            makefile_text.append("SRC=\t\t$(filter-out " + tmp2 + ", $(SRC_MAIN))")
            makefile_text.append("")
            del tmp2
            if len(file_test) != 0:
                makefile_text.append("SRC_TEST =\t$(shell find tests/ -name \"*.c\")")
                makefile_text.append("")
        else:
            if "main.c" not in copy_src[0]:
                makefile_text.append("SRC =\t\t" + str(copy_src[0]) + "\t\\")
                del copy_src[0]
            else:
                makefile_text.append("SRC =\t\t" + str(copy_src[1]) + "\t\\")
                del copy_src[1]
            for i in copy_src:
                if "main.c" not in i:
                    makefile_text.append("\t\t\t" + str(i) + "\t\\")
            makefile_text.append("")
            if len(file_test) != 0:
                makefile_text.append("SRC_TEST =\t" + str(file_test[0]) + "\t\\")
                del file_test[0]

                for i in file_test:
                    makefile_text.append("\t\t\t" + str(i) + "\t\\")
                makefile_text.append("")
    if options[4]:
        if len(file_lib) != 0:
            print(warn() + "Adding lib files..." + end())
            makefile_text.append("SRC_LIB =\t" + str(file_lib[0]) + "\t\\")
            del file_lib[0]

            for i in file_lib:
                makefile_text.append("\t\t\t" + str(i) + "\t\\")
            makefile_text.append("")
    makefile_text.append("CC =\tgcc")
    makefile_text.append("")
    makefile_text.append("OBJ =\t$(SRC_MAIN:.c=.o)")
    makefile_text.append("")
    makefile_text.append("NAME =\t\t" + str(name))
    makefile_text.append("")
    if options[1]:
        makefile_text.append("TEST_NAME =\tunit_tests")
        makefile_text.append("")
        makefile_text.append("TEST_FLAG = -lcriterion --coverage")
        if options[2]:
            makefile_text[-1] += " -lcsfml-graphics -lcsfml-audio -lcsfml-window -lcsfml-system"
        if options[3]:
            makefile_text[-1] += " -lncurses"
        if options[5]:
            makefile_text[-1] += " -I./include/"
        makefile_text.append("")
    text = "CFLAGS = -W -Wall -Wextra"
    if options[8]:
        print(warn() + "Adding -C flag..." + end())
        text += " -C"
    if options[0]:
        print(warn() + "Adding g3 flag..." + end())
        text += " -g3"
    makefile_text.append(text)
    del text
    if options[2]:
        print(warn() + "Adding csfml flags..." + end())
        makefile_text[-1] += " -lcsfml-graphics -lcsfml-audio -lcsfml-window -lcsfml-system"
    if options[3]:
        print(warn() + "Adding ncurses flags..." + end())
        makefile_text[-1] += " -lncurses"
    if options[5]:
        print(warn() + "Adding include flag..." + end())
        makefile_text[-1] += " -I./include/"
    if options[9]:
        makefile_text.append("")
        makefile_text.append("FILE_NB = $(words $(SRC_MAIN))")
    makefile_text.append("")
    makefile_text.append("all:\t$(NAME)")
    makefile_text.append("")
    makefile_text.append("$(NAME):\t$(OBJ)")
    if options[9]:
        makefile_text.append("\t@ echo \"\\033[1;36m[ FILES COMPILED ] \\033[0m \\033[1;34m$(FILE_NB)\\033[0m\"")
        makefile_text.append("\t@ $(CC) $(OBJ) $(CFLAGS)")
    else:
        makefile_text.append("\t$(CC) $(OBJ) $(CFLAGS)")
    if options[9]:
        makefile_text.append("\t@ echo \"\\033[1;34mBinary : \\033[1;32m$(NAME)\\033[1;34m created sucesfully.\\033[0m\"")
    if options[4]:
        makefile_text[-1] += " -L. $(SRC_LIB)"
    makefile_text[-1] += " -o $(NAME)"
    makefile_text.append("")
    makefile_text.append("clean:")
    if options[9]:
        makefile_text.append("\t@ echo \"\\033[3;31mRemoving: \\033[0m\"")
        makefile_text.append("\t@ echo \"\\033[3;31m$(OBJS)\\033[0m\" | tr ' ' '\\n'")
        makefile_text.append("\t@ rm -rf $(OBJ)")
    else:
        makefile_text.append("\trm -rf $(OBJ)")
    if options[1]:
        makefile_text.append("\trm -rf *.gc*")
        makefile_text.append("\trm -rf tests/*.gc*")
    makefile_text.append("")
    makefile_text.append("fclean:\tclean")
    if options[9]:
        makefile_text.append("\t@ echo \"\\033[3;31m./$(NAME)\\033[0m\"")
        makefile_text.append("\t@ rm -rf $(NAME)")
    else:
        makefile_text.append("\trm -rf $(NAME)")
    if options[1]:
        makefile_text.append("\trm -rf $(TEST_NAME)")
    makefile_text.append("")
    makefile_text.append("re:\tfclean all")
    makefile_text.append("")
    if options[9]:
        makefile_text.append("%.o:\t%.c")
        makefile_text.append("\t\t\t@ echo \"\\033[1;34m[ OK ]\\033[0m Compiling\" $<")
        makefile_text.append("\t\t\t@ $(CC) -o $@ -c $< $(CFLAGS)")
        makefile_text.append("")
    if options[1]:
        makefile_text.append("tests_run:\t$(SRC_TEST) $(SRC)")
        makefile_text.append("\t\t\t$(CC) $(SRC) $(SRC_TEST) $(TEST_FLAG) -o $(TEST_NAME)")
        makefile_text.append("\t\t\t./$(TEST_NAME)")
        if options[6]:
            makefile_text.append("\t\t\tgcovr --exclude tests/")
            makefile_text.append("\t\t\tgcovr -b --exclude tests/")
        makefile_text.append("")
    makefile_text.append(".PHONY:\tall clean fclean re")

    file = open("Makefile", "w", encoding='utf-8')
    text = "\n".join(makefile_text)
    file.write(text)
    file.close()
    print(green() + "Your Makefile has been successfully created !" + end())

def find_files(name):
    global options

    repos = ["./"]
    files_src = []
    files_tests = []
    files_lib = []
    nb_files_tests = 0
    nb_files_lib = 0
    nb_files = 0

    print(warn() + "Finding .c files..." + end())
    while len(repos) != 0:
        file_list = listdir(repos[0])
        for i in file_list:
            if ".c" in i:
                if "./tests/" in repos[0]:
                    files_tests.append(repos[0] + i)
                    nb_files_tests += 1
                elif "./bonus/" not in repos[0]:
                    files_src.append(repos[0] + i)
                    nb_files += 1
            elif ".a" in i:
                files_lib.append(repos[0] + i)
                nb_files_lib += 1
            else:
                try:
                    temp = listdir(repos[0] + i + "/")
                    repos.append(repos[0] + i + "/")
                    del temp
                except:
                    pass
        del repos[0]
        file_list = []
    if nb_files == 0:
        print(fail() + "Error: Cannot find any src file !")
        exit(84)
    print(green() + "Found " + warn() + bold() + str(nb_files) + end() + green() + " src file(s) !")
    if options[1]:
        print(green() + "Found " + warn() + bold() + str(nb_files_tests) + end() + green() + " test(s) file(s) !")
    if options[4]:
        print(green() + "Found " + warn() + bold() + str(nb_files_lib) + end() + green() + " library(ies) file(s) !")
    create_makefile(files_src, files_tests, files_lib, name)

name = "a.out"

search_update()

if len(arguments) != 1:
    if arguments[1] == "-h":
        print(green() + "USAGE:\n\t./update_makefile <binary name> <flags>\n" + end())
        print(warn() + "FLAGS:\n" + end() + "-d: Debug flag, add -g3 flag when we use make.")
        print("-t: Test flag, create makefile for units tests, get .c files in 'tests/' repository. Use make tests_run")
        print("-csfml: CSFML flag, create a makefile for graphical programs.")
        print("-ncurses: NCURSES flag, create a makefile for ncurses programs.")
        print("-lib: compile your program with your '.a' file.")
        print("-include: add the '/include/' repository to your makefile.")
        print("-gcovr: add gcovr commands. Requires: -t flag.")
        print("-shell: Search your src files with a shell command." + fail() + " Disabled if you have a src file in the same repository than your Makefile." + end())
        print("-C: Add -C flag on your makefile.")
        print("-clean: Add a clean make display.")
        exit(1)
    else:
        for i in range(1, len(arguments)):
            if arguments[i][0] == '-':
                if arguments[i][1] == 'd':
                    options[0] = True
                elif arguments[i][1] == 't':
                    options[1] = True
                elif arguments[i][1] == 'c':
                    if arguments[i] == "-csfml":
                        options[2] = True
                    elif arguments[i] == "-clean":
                        options[9] = True
                    else:
                        print(fail() + "Error: Flag not found. Please type './update_makefile -h'")
                        exit(84)
                elif arguments[i][1] == 'n':
                    if arguments[i] == "-ncurses":
                        options[3] = True
                    else:
                        print(fail() + "Error: Flag not found. Please type './update_makefile -h'")
                        exit(84)
                elif arguments[i][1] == 'l':
                    if arguments[i] == "-lib":
                        options[4] = True
                    else:
                        print(fail() + "Error: Flag not found. Please type './update_makefile -h'")
                        exit(84)
                elif arguments[i][1] == 'i':
                    if arguments[i] == '-include':
                        options[5] = True
                    else:
                        print(fail() + "Error: Flag not found. Please type './update_makefile -h'")
                elif arguments[i][1] == 'g':
                    if arguments[i] == '-gcovr':
                        options[6] = True
                    else:
                        print(fail() + "Error: Flag not found. Please type './update_makefile -h'")
                elif arguments[i][1] == 's':
                    if arguments[i] == '-shell':
                        options[7] = True
                    else:
                        print(fail() + "Error: Flag not found. Please type './update_makefile -h'")
                elif arguments[i][1] == 'C':
                    if arguments[i] == "-C":
                        options[8] = True
                    else:
                        print(fail() + "Error: Flag not found. Please type './update_makefile -h'")
                else:
                    print(fail() + "Error: Flag not found. Please type './update_makefile -h'")
                    exit(84)
            elif name == "a.out":
                name = arguments[i]
            else:
                print(fail() + "Error: Flag not found. Please type './update_makefile -h'")
                exit(84)
find_files(name)